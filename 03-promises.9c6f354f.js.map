{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAO,CACTC,MAAOC,SAASC,cAAc,uBAC9BC,KAAMF,SAASC,cAAc,sBAC7BE,OAAQH,SAASC,cAAc,wBAC/BG,KAAMJ,SAASC,cAAc,UA8BjC,SAASI,EAAcC,EAAUP,GAC7B,MAAMQ,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAAQC,KACxBC,YAAW,KACHN,EACAI,EAAQ,C,SAACL,E,MAAUP,IAErBa,EAAO,C,SAACN,E,MAAUP,GAAK,GAE3BA,EAAA,GAIV,CAzCAD,EAAKM,KAAKU,iBAAiB,UAG3B,SAAsBC,GAClBA,EAAMC,iBACN,MAAMC,EAAaC,SAASpB,EAAKC,MAAMoB,OACjCC,EAAYF,SAASpB,EAAKI,KAAKiB,OAC/BE,EAAiBH,SAASpB,EAAKK,OAAOgB,QAKhD,SAA2BpB,EAAOG,EAAMC,GACpC,IAAImB,EAAgB,EAEpB,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,EAAQoB,IACpBA,EAAI,IAAGxB,GAASG,GAEpBoB,GAAgB,EAChBjB,EAAciB,EAAcvB,GAAOyB,MAAK,EAAClB,SAACA,EAAQP,MAAEA,MAChDH,EAAA6B,OAAOC,QAAQ,qBAAqBpB,QAAeP,MAAS,IAC7D4B,OAAM,EAACrB,SAACA,EAAQP,MAAEA,MACjBH,EAAA6B,OAAOG,QAAQ,oBAAoBtB,QAAeP,MAAS,GAGvE,CAhBI8B,CAAkBZ,EAAWG,EAAUC,EAC3C,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\nconst refs = { \n    delay: document.querySelector('input[name=\"delay\"]'),\n    step: document.querySelector('input[name=\"step\"]'),\n    amount: document.querySelector('input[name=\"amount\"]'),\n    form: document.querySelector('.form'),\n}\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\n\nfunction onFormSubmit(event) {\n    event.preventDefault() \n    const firstDelay = parseInt(refs.delay.value);\n    const stepDelay = parseInt(refs.step.value);\n    const amountPromises = parseInt(refs.amount.value);\n\n    addPromisesOnForm(firstDelay,stepDelay,amountPromises);\n}\n\nfunction addPromisesOnForm(delay, step, amount) {\n    let numberPromise = 0;\n\n    for (let i = 0; i < amount; i++) {\n        if (i > 0) delay += step;\n        \n        numberPromise +=1;\n        createPromise(numberPromise,delay).then(({position, delay})=> {\n            Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n        }).catch(({position, delay})=> {\n            Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        })\n    }\n}\n\nfunction createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.3;\n    \n    return new Promise((resolve,reject)=> {\n        setTimeout(()=>{\n            if (shouldResolve) {\n                resolve({position, delay})\n            } else {\n              reject({position, delay})\n            }\n        },delay)\n        \n    })\n    \n}\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","delay","document","querySelector","step","amount","form","$ce04d3a99e08e73b$var$createPromise","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","firstDelay","parseInt","value","stepDelay","amountPromises","numberPromise","i","then","Notify","success","catch","failure","$ce04d3a99e08e73b$var$addPromisesOnForm"],"version":3,"file":"03-promises.9c6f354f.js.map"}